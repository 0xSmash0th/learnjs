# Chapter 1

## Make a game with javascript!

Let's build a game, everybody. Let's have some fun.

We'll create a bunch of objects and functions. We'll put them together to make our game run, and experiment with changing the functions and the object attributes to alter the behavior of the game.

It'll be a single player game. A [roguelike](http://en.wikipedia.org/wiki/Roguelike) [rpg](http://en.wikipedia.org/wiki/Role-playing_video_game) with extremely simple graphics.

Usually roguelike games have procedurally generated levels, but we'll just build static levels for this example.

Our game will feature monsters, weapons, coins, potions, and a hero.

That small list above gives us a good sense of what objects and functions we'll need in our code.

We'll need to represent each of those things in our game code, so let's briefly outline the parts of the game we'll need to build, along with the typical actions each part will have:

### Game
- Loop
- Draw

### Level
- Load level data
- Draw

### Hero
- Update
- Draw
- Drink Potion
- Pick up Coin
- Fight Monster

### Monster
- Update
- Draw
- Fight Hero

### Weapon
- Update
- Draw

### Coin
- Update
- Draw

### Potions
- Update
- Draw

Each of the above headers will be an object in our game, and each of the list items will be methods or attributes of their respective headers.

## Requirements:
You'll need these things installed on your computer:
- node.js
- browserify and beefy

Make sure you're read the intro to node and intro to browserify chapters before starting this project. (TODO: link to those chapters.)

To get started, create a folder for your game. I'm calling it `node-rogue`:

~~~~~~~~
mkdir node-rogue
cd node-rogue
~~~~~~~~

Run the npm init command to create a package.json file for your project:

~~~~~~~~
npm init
~~~~~~~~

Answer all the questions however you want. I kept them mostly at the defaults (text in parentheses is the default, if you just hit enter it'll use that default value).

~~~~~~~~
name: (node-rogue) 
version: (0.0.0) 
description: a roguelike game made with javascript
entry point: (index.js) game.js
test command: node test.js
git repository: git://github.com/learn-js/node-rogue
keywords: gamezzz
author: seth vincent
license: (BSD) MIT
~~~~~~~~

You should end up with a package.json file that looks like this:

~~~~~~~~
{
  "name": "node-rogue",
  "version": "0.0.0",
  "description": "a roguelike game made with javascript",
  "main": "game.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/learnjs/node-rogue"
  },
  "keywords": [
    "gamezzz"
  ],
  "author": "sethvincent",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/learnjs/node-rogue/issues"
  }
}
~~~~~~~~

Now, create the game.js and test.js files:

~~~~~~~~
touch game.js test.js
~~~~~~~~

We'll also need an index.html file:

~~~~~~~~
touch index.html
~~~~~~~~

Open up that file and make it look like this:

~~~~~~~~
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>node-rogue</title>
</head>
<body>

<h1 id="title">node-rogue</h1>

<canvas id="game"></canvas>

<script src="./bundle.js"></script>
</body>
</html>
~~~~~~~~

Let's add a css file:

~~~~~~~~
touch style.css
~~~~~~~~

And give it some very basic styles:

~~~~~~~~
html,
body {
  font: 16px/1.2 "Helvetica Neue", Helvetica, arial, sans-serif;
  color: #444;
  -webkit-font-smoothing: antialiased;
  font-smoothing: antialiased;
  font-weight: 300;
}

h1#title {
  margin-bottom: 50px;
}

canvas#game {
  display: block;
  margin: 0px auto;
}
~~~~~~~~

To ease development, we'll use a simple game library I recently created called `crtrdg-gameloop`. All it does is initialize the canvas, and provide a simple api that emits `update` and `draw` events that we can use to make our game. Later we'll take a look at the crtrdg-gameloop module in detail. (TODO: add a link to that chapter)

Install `crtrdg-gameloop` using npm:

~~~~~~~~
npm install crtrdg-gameloop --save
~~~~~~~~

The `--save` option edits the package.json file and adds the module you're installing the the dependencies list. 

## Now, to start writing javascript! 
Open the game.js file, and get started:

~~~~~~~~
// require crtrdg-gameloop
var Game = require('crtrdg-gameloop');

// create a new game
var game = new Game({
  canvasId: 'game',
  width: 800,
  height: 400,
  backgroundColor: '#ff1f1f'
});

// game.on('update', callback) 
//
// this runs each time the game loops
// it is useful for things like checking for user input
// moving the position of characters/items
// checking for game boundaries and collision detection
// and other similar tasks
// interval is the time since the last loop
game.on('update', function(interval){
  console.log('update', interval);
});

// game.on('draw', callback) 
//
// the draw event runs after the update event
// it's used for actually drawing your characters / items / backgrounds to the canvas
// context is the actual canvas context, so you'll
// use it to draw just like in the Introduction to Canvas chapter.
game.on('draw', function(context){
  console.log('draw', context);
  context.fillStyle = '#fff';
  context.fillRect(10, 10, 10, 10);
});

// game.on('pause', callback) 
//
// if game.pause() is called somewhere in your code,
// a `pause` event will be emitted
// listen for it like this:
game.on('pause', function(){
  console.log('paused');
});

// game.on('resume', callback) 
//
// if game.resume() is called somewhere in your code,
// a `resume` event will be emitted
// listen for it like this:
game.on('resume', function(){
  console.log('resumed');
});
~~~~~~~~

To run this code we will use [beefy](https://github.com/chrisdickinson/beefy).

Open the package.json file and add a `start` script to the scripts object so it looks like this:

~~~~~~~~
"scripts": {
  "test": "node test.js",
  "start": "beefy game.js:bundle.js --live"
},
~~~~~~~~

If you've installed browserify and beefy like this:

~~~~~~~~
npm install -g browserify beefy
~~~~~~~~

You can now run:

~~~~~~~~
npm start
~~~~~~~~

This will serve your index.html file at http://localhost:9966.

Open Chrome, navigate to that url, and open the javascript console.

You should see the `update` and `draw` messages being logged to the console and a big red canvas with a small white block in the top left corner!

This is the beginning of node-rogue.

## Create the player character

Next, we'll make a player that can move around the screen. We'll make use of another small game module: `[crtrdg-entity](https://github.com/sethvincent/crtrdg-entity)`.

First, install the `crtrdg-entity` module:

~~~~~~~~
npm install --save crtrdg-entity
~~~~~~~~

Next, create a player.js file that looks like this:

~~~~~~~~
// require `crtrdg-entity` module
var Entity = require('crtrdg-entity');
var inherits = require('inherits');

// Make this available as a module that can be required
module.exports = Player;

// make the Player funtion inherit from crtrdg-entity
inherits(Player, Entity);

// create Player function
function Player(options){
  this.position = { 
    x: options.position.x, 
    y: options.position.y 
  };

  this.size = {
    x: options.size.x,
    y: options.size.y
  };

  this.color = options.color
}
~~~~~~~~

So we created a constructor that takes position, size, and color options. We can now use `Player` in our game.js file.

Revise game.js to look like this:

~~~~~~~~
var Game = require('crtrdg-gameloop');

// Require the Player module
var Player = require('./player');

// the same game code we had before:

var game = new Game({
  canvasId: 'game',
  width: 800,
  height: 400,
  backgroundColor: '#ff1f1f'
});

game.on('update', function(interval){
  console.log('update', interval);
});

game.on('draw', function(context){
  console.log('draw', context);
});

game.on('pause', function(){
  console.log('paused');
});

game.on('resume', function(){
  console.log('resumed');
});

// The new player code:

// create instance of Player with position, size, and color
var player = new Player({
  position: { x: 10, y: 10 },
  size: { x: 10, y: 10 },
  color: '#fff'
});

// add the player to the game
player.addTo(game);

// listen for update event.
// here you can do things like change position or watch for keyboard/mouse events
player.on('update', function(interval){
  console.log(this.position);
});

// listen for draw event.
// context is the canvas context, so you can draw on the canvas like usual.
player.on('draw', function(context){
  context.fillStyle = this.color;
  context.fillRect(this.position.x, this.position.y, this.size.x, this.size.y);
});
~~~~~~~~

Check your browser at url http://localhost:9966 and you should see the red canvas with a small white square in the top left corner!

## Adding keyboard interaction

Let's move that little white square around the screen now!

We'll use a module named `crtrdg-keyboard` to listen for keyboard events.

Install it:

~~~~~~~~
npm install --save crtrdg-keyboard
~~~~~~~~

Require it in game.js:

~~~~~~~~
var Keyboard = require('crtrdg-keyboard');
~~~~~~~~

Create the keyboard:

~~~~~~~~
var keyboard = new Keyboard(game);
~~~~~~~~

Revise player.on('update'):

~~~~~~~~
player.on('update', function(interval){
  console.log(this.position);

  if ('<up>' in keyboard.keysDown){
    this.position.y -= 1;
  }
  
  if ('<down>' in keyboard.keysDown){
    this.position.y += 1;
  }
  
  if ('<left>' in keyboard.keysDown){
    this.position.x -= 1;
  }

  if ('<right>' in keyboard.keysDown){
    this.position.x += 1;
  }
});
~~~~~~~~

So the full code of our game.js file should now look like this:

~~~~
var Game = require('crtrdg-gameloop');
var Keyboard = require('crtrdg-keyboard');
var Player = require('./player');

var game = new Game({
  canvasId: 'game',
  width: 800,
  height: 400,
  backgroundColor: '#ff1f1f'
});

var keyboard = new Keyboard(game);

game.on('update', function(interval){
  console.log('update', interval);
});

game.on('draw', function(context){
  console.log('draw', context);
});

game.on('pause', function(){
  console.log('paused');
});

game.on('resume', function(){
  console.log('resumed');
});

var player = new Player({
  position: { x: 10, y: 10 },
  size: { x: 10, y: 10 },
  color: '#fff'
});

player.addTo(game);

player.on('update', function(interval){
  console.log(this.position);

  if ('<up>' in keyboard.keysDown){
    this.position.y -= 1;
  }
  
  if ('<down>' in keyboard.keysDown){
    this.position.y += 1;
  }
  
  if ('<left>' in keyboard.keysDown){
    this.position.x -= 1;
  }

  if ('<right>' in keyboard.keysDown){
    this.position.x += 1;
  }
});

player.on('draw', function(context){
  context.fillStyle = this.color;
  context.fillRect(this.position.x, this.position.y, this.size.x, this.size.y);
});
~~~~~~~~


> _This section of the book is still a work in progress. Make suggestions at [github.com/learn-js/learnjs/issues](http://github.com/learn-js/learnjs/issues).