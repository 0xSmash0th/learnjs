# Introduction to git & GitHub

Developing websites and applications without using git is equivalent to writing in Microsoft Word without ever saving your work.

**Use git.**

Git is a version control system, which means it can track every change you make to your code. This allows you to review and edit past versions if you mess something up. And it allows you to figure out when errors were introduced to the code.

There are many other bonuses to using git, which are mostly out of this book's scope.

The best way to start learning git (and GitHub) is to visit [try.github.com](http://try.github.com).

## Get on GitHub
If you haven't already, create an account at [github.com](http://github.com).

GitHub is a great place to host your code. Many employers hiring for developer and designer positions will ask for a GitHub profile, and they'll use your GitHub activity as part of the criteria in their decision-making process.

In fact, if you're looking to get a job with a particular company, try to find _their_ GitHub profile and start contributing to their open source projects. This will help you stand out, and they'll already know your technical abilities based on your open source contributions. That's a big win.

GitHub has become the de facto code hosting service for most open source communities.

## Create a site for yourself using GitHub

GitHub has a useful service called [GitHub Pages](http://pages.github.com) that allows you to host a simple site on their servers for free.

### With GitHub Pages you can:
- design a website any way you want by having complete control over the html, css, and javascript.
- use simple templates for getting started using GitHub Pages.
- create sites for yourself and all of your projects hosted on GitHub.
- use a custom domain name if you want!

Visit the [help section for GitHub Pages](https://help.github.com/categories/20/articles) to learn more details about hosting sites on GitHub.

Basics of using git:

Create a git repository:

~~~~~~~~
cd name-of-folder
git init
~~~~~~~~

Add files:

~~~~~~~~
git add name-of-file

// or add all files in directory:

git add .
~~~~~~~~

When you add files to a git repository they are "staged" and ready to be committed.

Remove files:
~~~~~~~~
git rm name-of-file

// force removal of files:

git rm -rf name-of-file-or-directory
~~~~~~~~

Commit files and add a message using the `-m` option:

~~~~~~~~
git commit -m 'a message describing the commit'
~~~~~~~~

Create a branch:

~~~~~~~~
git branch name-of-branch
~~~~~~~~

Checkout a branch:

~~~~~~~~
git checkout name-of-branch
~~~~~~~~

Shortcut for creating a new branch and checking it out:

~~~~~~~~
git checkout -b name-of-branch
~~~~~~~~

Merge a branch into the master branch:

~~~~~~~~
git checkout master
git merge name-of-branch
~~~~~~~~

Add a remote repository:

~~~~~~~~
git remote add origin git@github.com:yourname/projectname.git
~~~~~~~~

List associated repositories:

~~~~~~~~
git remote -v
~~~~~~~~

Pull changes from a remote repository:

~~~~~~~~
git pull origin master
~~~~~~~~

Push changes to a remote repository

~~~~~~~~
git push origin master
~~~~~~~~

Checkout a remote branch:

~~~~~~~~
git checkout -t origin/haml
~~~~~~~~

> _This section of the book is still a work in progress. Make suggestions at [github.com/learn-js/learnjs/issues](http://github.com/learn-js/learnjs/issues).




